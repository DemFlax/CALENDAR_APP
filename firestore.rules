rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPERS
    // ============================================
    
    function isManager() {
      return request.auth != null && request.auth.token.role == 'manager';
    }
    
    function isGuide() {
      return request.auth != null && request.auth.token.role == 'guide';
    }
    
    function getGuideId() {
      return request.auth.token.guideId;
    }
    
    // Valida que campos críticos no cambien
    function immutableFields() {
      return request.resource.data.fecha == resource.data.fecha
          && request.resource.data.slot == resource.data.slot
          && request.resource.data.createdAt == resource.data.createdAt;
    }
    
    // ============================================
    // COLECCIÓN: guides
    // ============================================
    
    match /guides/{guideId} {
      allow read, write: if isManager();
      allow read: if isGuide() && getGuideId() == guideId;
    }
    
    // ============================================
    // COLECCIÓN: shifts
    // ============================================
    
    match /shifts/{shiftId} {
      // LECTURA: todos los autenticados
      allow read: if request.auth != null;
      
      // CREACIÓN: solo Cloud Functions (Admin SDK bypassa rules)
      // Frontend NO puede crear turnos
      allow create: if false;
      
      // ACTUALIZACIÓN: validaciones por rol y transición
      allow update: if 
        // MANAGER: solo LIBRE ↔ ASIGNADO
        (isManager() && immutableFields() && (
          // LIBRE → ASIGNADO
          (resource.data.estado == 'LIBRE' 
           && request.resource.data.estado == 'ASIGNADO'
           && request.resource.data.guiaId is string
           && request.resource.data.guiaId.size() > 0)
          ||
          // ASIGNADO → LIBRE
          (resource.data.estado == 'ASIGNADO' 
           && request.resource.data.estado == 'LIBRE'
           && request.resource.data.guiaId == null)
        ))
        ||
        // GUÍA: solo LIBRE ↔ NO_DISPONIBLE (de su propio guideId)
        (isGuide() && immutableFields() && (
          // LIBRE → NO_DISPONIBLE
          (resource.data.estado == 'LIBRE'
           && request.resource.data.estado == 'NO_DISPONIBLE'
           && request.resource.data.guiaId == getGuideId())
          ||
          // NO_DISPONIBLE → LIBRE (solo SUS turnos bloqueados)
          (resource.data.estado == 'NO_DISPONIBLE'
           && resource.data.guiaId == getGuideId()
           && request.resource.data.estado == 'LIBRE'
           && request.resource.data.guiaId == null)
        ));
      
      // ELIMINACIÓN: prohibida (auditoría)
      allow delete: if false;
    }
    
    // ============================================
    // COLECCIÓN: notifications
    // ============================================
    
    match /notifications/{notificationId} {
      allow read, write: if isManager();
    }
  }
}